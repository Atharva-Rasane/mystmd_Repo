{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Welcome to the example notebook\n",
        "\n",
        "This is a simple notebook with varied content put together for testing purposes. We'll start of with a few of the stranger cells.\n",
        "\n",
        " 1. Markdown (this cell :p)\n",
        " 1. Raw\n",
        " 1. Code: with and without outputs"
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {},
      "source": ["This is RAW NBCONVERT!"]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "iooxa": {
          "id": {
            "block": "kZ3Y3YgFc2n5dpYqPK2Z",
            "project": "6F37hO4vJMuZ4ffWP5kA",
            "version": 7
          }
        }
      },
      "source": ["Some markdown in a linked cell"]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# code cell with no output\n",
        "import numpy as np\n",
        "img = np.random.random((6,6))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Some Text\n",
            "[[0.04536222 0.67645017 0.57347146 0.30708983 0.07049445 0.92350698]\n",
            " [0.01598615 0.28084959 0.67537685 0.86033393 0.59685489 0.33639273]\n",
            " [0.41737081 0.19484492 0.8071921  0.58540753 0.00421797 0.84192761]\n",
            " [0.63093561 0.50576244 0.8041857  0.72576677 0.99256617 0.5301033 ]\n",
            " [0.57097421 0.51533378 0.6850103  0.65881459 0.37028767 0.11983791]\n",
            " [0.71233883 0.7001081  0.69679106 0.37113751 0.15668298 0.25847631]]\n",
            "an array [[0.04536222 0.67645017 0.57347146 0.30708983 0.07049445 0.92350698]\n",
            " [0.01598615 0.28084959 0.67537685 0.86033393 0.59685489 0.33639273]\n",
            " [0.41737081 0.19484492 0.8071921  0.58540753 0.00421797 0.84192761]\n",
            " [0.63093561 0.50576244 0.8041857  0.72576677 0.99256617 0.5301033 ]\n",
            " [0.57097421 0.51533378 0.6850103  0.65881459 0.37028767 0.11983791]\n",
            " [0.71233883 0.7001081  0.69679106 0.37113751 0.15668298 0.25847631]]\n"
          ]
        },
        {
          "data": {
            "text/plain": ["<matplotlib.colorbar.Colorbar at 0x7fe8cd8423d0>"]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": ["<Figure size 432x288 with 2 Axes>"]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# code cell with 3 outputs\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "print(\"Some Text\")\n",
        "print(img)\n",
        "print(\"an array\", img)\n",
        "\n",
        "img2 = np.random.random((6,6))\n",
        "plt.figure()\n",
        "plt.imshow(img2)\n",
        "plt.colorbar()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<p>Visit <a href=\"http://www.curvenote.com\">www.curvenote.com</a>, collaboration and publishing wrapped \n",
              "around your Jupyter notebooks!</p>\n",
              "<ul>\n",
              "    <li>Version Control</li>\n",
              "    <li>Collaboration</li>\n",
              "    <li>Living documents</li>\n",
              "</ul>\n"
            ],
            "text/plain": ["<IPython.core.display.HTML object>"]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from IPython.core.display import HTML, display\n",
        "\n",
        "display(HTML(''.join([\"<p>Visit <a href=\\\"http://www.curvenote.com\\\">www.curvenote.com</a>, collaboration and publishing wrapped \\n\",\n",
        "       \"around your Jupyter notebooks!</p>\\n\",\n",
        "       \"<ul>\\n\",\n",
        "       \"    <li>Version Control</li>\\n\",\n",
        "       \"    <li>Collaboration</li>\\n\",\n",
        "       \"    <li>Living documents</li>\\n\",\n",
        "       \"</ul>\\n\"])))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
